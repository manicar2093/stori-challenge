// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	txanalizer "github.com/manicar2093/stori-challenge/internal/txanalizer"
	mock "github.com/stretchr/testify/mock"
)

// EmailSender is an autogenerated mock type for the EmailSender type
type EmailSender struct {
	mock.Mock
}

type EmailSender_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailSender) EXPECT() *EmailSender_Expecter {
	return &EmailSender_Expecter{mock: &_m.Mock}
}

// SendAccountDetailsEmail provides a mock function with given fields: input
func (_m *EmailSender) SendAccountDetailsEmail(input txanalizer.SendAccountDetailsEmailInput) (uuid.UUID, error) {
	ret := _m.Called(input)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(txanalizer.SendAccountDetailsEmailInput) (uuid.UUID, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(txanalizer.SendAccountDetailsEmailInput) uuid.UUID); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(txanalizer.SendAccountDetailsEmailInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmailSender_SendAccountDetailsEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAccountDetailsEmail'
type EmailSender_SendAccountDetailsEmail_Call struct {
	*mock.Call
}

// SendAccountDetailsEmail is a helper method to define mock.On call
//   - input txanalizer.SendAccountDetailsEmailInput
func (_e *EmailSender_Expecter) SendAccountDetailsEmail(input interface{}) *EmailSender_SendAccountDetailsEmail_Call {
	return &EmailSender_SendAccountDetailsEmail_Call{Call: _e.mock.On("SendAccountDetailsEmail", input)}
}

func (_c *EmailSender_SendAccountDetailsEmail_Call) Run(run func(input txanalizer.SendAccountDetailsEmailInput)) *EmailSender_SendAccountDetailsEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(txanalizer.SendAccountDetailsEmailInput))
	})
	return _c
}

func (_c *EmailSender_SendAccountDetailsEmail_Call) Return(_a0 uuid.UUID, _a1 error) *EmailSender_SendAccountDetailsEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmailSender_SendAccountDetailsEmail_Call) RunAndReturn(run func(txanalizer.SendAccountDetailsEmailInput) (uuid.UUID, error)) *EmailSender_SendAccountDetailsEmail_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewEmailSender interface {
	mock.TestingT
	Cleanup(func())
}

// NewEmailSender creates a new instance of EmailSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEmailSender(t mockConstructorTestingTNewEmailSender) *EmailSender {
	mock := &EmailSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
