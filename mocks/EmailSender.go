// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	email "github.com/jordan-wright/email"
	mock "github.com/stretchr/testify/mock"

	txanalizer "github.com/manicar2093/stori-challenge/internal/txanalizer"
)

// EmailSender is an autogenerated mock type for the EmailSender type
type EmailSender struct {
	mock.Mock
}

type EmailSender_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailSender) EXPECT() *EmailSender_Expecter {
	return &EmailSender_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *EmailSender) Execute(_a0 *email.Email, _a1 txanalizer.MailgunConfig) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*email.Email, txanalizer.MailgunConfig) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailSender_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type EmailSender_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *email.Email
//   - _a1 txanalizer.MailgunConfig
func (_e *EmailSender_Expecter) Execute(_a0 interface{}, _a1 interface{}) *EmailSender_Execute_Call {
	return &EmailSender_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *EmailSender_Execute_Call) Run(run func(_a0 *email.Email, _a1 txanalizer.MailgunConfig)) *EmailSender_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*email.Email), args[1].(txanalizer.MailgunConfig))
	})
	return _c
}

func (_c *EmailSender_Execute_Call) Return(_a0 error) *EmailSender_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmailSender_Execute_Call) RunAndReturn(run func(*email.Email, txanalizer.MailgunConfig) error) *EmailSender_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmailSender creates a new instance of EmailSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailSender {
	mock := &EmailSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
