// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// HandleableError is an autogenerated mock type for the HandleableError type
type HandleableError struct {
	mock.Mock
}

type HandleableError_Expecter struct {
	mock *mock.Mock
}

func (_m *HandleableError) EXPECT() *HandleableError_Expecter {
	return &HandleableError_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields:
func (_m *HandleableError) Error() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HandleableError_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type HandleableError_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *HandleableError_Expecter) Error() *HandleableError_Error_Call {
	return &HandleableError_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *HandleableError_Error_Call) Run(run func()) *HandleableError_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HandleableError_Error_Call) Return(_a0 string) *HandleableError_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandleableError_Error_Call) RunAndReturn(run func() string) *HandleableError_Error_Call {
	_c.Call.Return(run)
	return _c
}

// StatusCode provides a mock function with given fields:
func (_m *HandleableError) StatusCode() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// HandleableError_StatusCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatusCode'
type HandleableError_StatusCode_Call struct {
	*mock.Call
}

// StatusCode is a helper method to define mock.On call
func (_e *HandleableError_Expecter) StatusCode() *HandleableError_StatusCode_Call {
	return &HandleableError_StatusCode_Call{Call: _e.mock.On("StatusCode")}
}

func (_c *HandleableError_StatusCode_Call) Run(run func()) *HandleableError_StatusCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HandleableError_StatusCode_Call) Return(_a0 int) *HandleableError_StatusCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandleableError_StatusCode_Call) RunAndReturn(run func() int) *HandleableError_StatusCode_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewHandleableError interface {
	mock.TestingT
	Cleanup(func())
}

// NewHandleableError creates a new instance of HandleableError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandleableError(t mockConstructorTestingTNewHandleableError) *HandleableError {
	mock := &HandleableError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
