service: stori-challenge
frameworkVersion: '3'

provider:
  name: aws
  runtime: go1.x
  stage: ${env:ENVIRONMENT}
  region: us-east-2

plugins:
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 2
  s3:
    storiChallengeBucketName: stori-challenge-bucket-${sls:stage}

package:
  patterns:
    - '!./**'
    - './.bin/aws/lambda/**'

functions:
  analyse_transactions:
    name: analyse_transactions-${sls:stage}
    handler: .bin/aws/lambda/analyse_transactions
    role: AccountTxFilesLambdaRole
    environment:
      DATABASE_URL: ${env:DATABASE_URL}
      ENVIRONMENT: ${env:ENVIRONMENT}
      EMAIL_TO: ${env:EMAIL_TO}
      EMAIL_FROM: ${env:EMAIL_FROM}
      SMTP_SERVER: ${env:SMTP_SERVER}
      SMTP_ADDR: ${env:SMTP_ADDR}
      SMTP_USER: ${env:SMTP_USER}
      SMTP_PASSWORD: ${env:SMTP_PASSWORD}
      SMTP_HOST: ${env:SMTP_HOST}
      TRANSACTIONS_FILES_BUCKET_NAME: ${self:custom.s3.storiChallengeBucketName}
      TRANSACTIONS_FILE_PATH: ${env:TRANSACTIONS_FILE_PATH}

resources:
  Resources:
    AccountTxFiles:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3.storiChallengeBucketName}

    AccountTxFilesLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: S3AccessPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource: arn:aws:s3:::${self:custom.s3.storiChallengeBucketName}/*


