// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	txanalizer "github.com/manicar2093/stori-challenge/internal/txanalizer"
	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

type TransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepository) EXPECT() *TransactionRepository_Expecter {
	return &TransactionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: input
func (_m *TransactionRepository) Create(input txanalizer.CreateAccountTransactionsInput) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(txanalizer.CreateAccountTransactionsInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TransactionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - input txanalizer.CreateAccountTransactionsInput
func (_e *TransactionRepository_Expecter) Create(input interface{}) *TransactionRepository_Create_Call {
	return &TransactionRepository_Create_Call{Call: _e.mock.On("Create", input)}
}

func (_c *TransactionRepository_Create_Call) Run(run func(input txanalizer.CreateAccountTransactionsInput)) *TransactionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(txanalizer.CreateAccountTransactionsInput))
	})
	return _c
}

func (_c *TransactionRepository_Create_Call) Return(_a0 error) *TransactionRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionRepository_Create_Call) RunAndReturn(run func(txanalizer.CreateAccountTransactionsInput) error) *TransactionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
